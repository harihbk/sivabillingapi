/**
 * An HTML Header or Footer which will be printed onto every page of the PDF. This can be used to override
 *
 * When using HtmlHeaderFooter it is important to set {@link htmlFragment}
 *
 * Merge meta-data into your HTML using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}
 */
export interface HtmlAffix {
    /**
     * The HTML which will be used to render the Header or Footer should be an HTML snippet rather than a complete
     * document. It may contain styles & images.
     *
     * Merge meta-data into the HtmlFragment by putting any of these placeholder strings into the text:
     * {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}.
     * An alternative mail-merge style using the pattern <span class='total-pages'></span> is also supported.
     *
     * HtmlFragment is a stand-alone HTML document which does not inherit styles or settings from your
     * main HTML content unless LoadStylesAndCSSFromMainHtmlDocument is set to true.
     */
    htmlFragment: string;
    /**
     * Maximum Height of the HTML Header / Footer in millimeters. This value must be set sufficiently high to display the
     * full HTML header / footer content.
     */
    maxHeight?: number;
    /**
     * Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document.
     *
     *  @default false
     */
    dividerLine?: boolean;
    /**
     * A html color code for divider line color see {@link dividerLine}
     *
     * @default #b1b1b1
     */
    dividerLineColor?: string;
    /**
     * Loads style code blocks and links to CSS style sheets from the main HTML document (which provides the PDF content) into the {@link HtmlAffix}.
     *
     * By default, Html Headers and Footers are stand-alone HTML documents with their own default styles. Setting {@link loadStylesAndCSSFromMainHtmlDocument} to true will attempt to load all STYLE and LINK tags from the main HTML document (which renders the PDF) into the {@link HtmlHeaderFooter}.
     *
     * If your main HTML document contains complex CSS frameworks, styles the HEAD or BODY element heavily, or loads CSS from JavaScript, then this method may not work as intended.
     *
     * This feature is not available for RenderUrlAsPdf methods. It works for HTMLToPdf and HtmlFileToPdf conversions only.
     *
     * It is often preferable to load style sheets explicitly into your HTML Headers and Footers as STYLE and LINK tags within the {@link htmlFragment} for granular control.
     *
     * @default false
     */
    loadStylesAndCSSFromMainHtmlDocument?: boolean;
}
/**
 * Defines PDF Header and Footer display options.
 *
 * {@link TextAffix} uses a logical approach to rendering Headers and Footers for the most common use cases.
 *
 * @see {@link HtmlAffix}
 */
export interface TextAffix {
    /**
     * Sets the left-hand side header text for the PDF document.
     *
     * Merge meta-data into your header using any of these placeholder strings:
     * {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}
     */
    leftText?: string;
    /**
     * Sets the centered header text for the PDF document.
     *
     * Merge meta-data into your header using any of these placeholder strings:
     * {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}
     */
    centerText?: string;
    /**
     * Sets the right-hand side header text for the PDF document.
     *
     * Merge meta-data into your header using any of these placeholder strings:
     * {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}
     */
    rightText?: string;
    /**
     * Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document.
     *
     *  @default false
     */
    dividerLine?: boolean;
    /**
     * A html color code for divider line color see {@link dividerLine}
     *
     * @default #b1b1b1
     */
    dividerLineColor?: string;
    /**
     * Font family. Default is {@link AffixFonts.Arial}.
     */
    font?: AffixFonts;
    /**
     * Font size in px.
     * @default 10
     */
    fontSize?: number;
}
/**
 * Supported Affix Fonts
 */
export declare enum AffixFonts {
    Arial = 0,
    Arial_Bold = 1,
    Arial_BoldItalic = 2,
    Arial_Italic = 3,
    Courier = 4,
    Courier_BoldOblique = 5,
    Courier_Oblique = 6,
    Courier_Bold = 7,
    CourierNew = 8,
    CourierNew_Bold = 9,
    CourierNew_BoldItalic = 10,
    CourierNew_Italic = 11,
    Helvetica = 12,
    Helvetica_Bold = 13,
    Helvetica_BoldOblique = 14,
    Helvetica_Oblique = 15,
    Symbol = 16,
    TimesNewRoman = 17,
    TimesNewRoman_Bold = 18,
    TimesNewRoman_BoldItalic = 19,
    TimesNewRoman_Italic = 20,
    ZapfDingbats = 21
}
//# sourceMappingURL=affix.d.ts.map