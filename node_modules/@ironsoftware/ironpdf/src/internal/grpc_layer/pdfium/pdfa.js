"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toPdfUA = exports.toPdfA = void 0;
const access_1 = require("../../access");
const util_1 = require("../util");
const fs_1 = __importDefault(require("fs"));
function toPdfA(id, customICCFilePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            const stream = client.Pdfium_ConvertToPdfA((err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    if (value === null || value === void 0 ? void 0 : value.exception) {
                        (0, util_1.handleRemoteException)(value.exception, reject);
                    }
                    else {
                        resolve();
                    }
                }
            });
            stream.write({ info: { document: { documentId: id } } });
            if (customICCFilePath) {
                (0, util_1.chunkBuffer)(fs_1.default.readFileSync(customICCFilePath)).forEach((chunk) => {
                    stream.write({
                        iccBytesChunk: chunk
                    });
                });
            }
            stream.end();
        });
    });
}
exports.toPdfA = toPdfA;
function toPdfUA(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_ConvertToPdfUA({
                document: { documentId: id },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.toPdfUA = toPdfUA;
//# sourceMappingURL=pdfa.js.map