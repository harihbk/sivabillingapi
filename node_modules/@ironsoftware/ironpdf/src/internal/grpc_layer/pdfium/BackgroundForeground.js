"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addBackgroundForeground = void 0;
const access_1 = require("../../access");
const util_1 = require("../util");
function addBackgroundForeground(destId, srcId, srcPageIndex, isBackground, destPageIndices) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const pi = yield (0, util_1.AsyncPdfPageSelectionToIndexes)(destId, destPageIndices);
        return new Promise((resolve, reject) => {
            client.pdfiumBackgroundForegroundAddBackgroundForeground({
                destinationPdf: { documentId: destId },
                destPageIndices: pi,
                layerMode: { enumValue: isBackground ? 1 : 0 },
                sourcePdf: { documentId: srcId },
                srcPageIndex: srcPageIndex,
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.addBackgroundForeground = addBackgroundForeground;
//# sourceMappingURL=BackgroundForeground.js.map