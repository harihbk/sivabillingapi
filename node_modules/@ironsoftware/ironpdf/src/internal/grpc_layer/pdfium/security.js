"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePdfiumGetPdfSecuritySettingsResultP__Output = exports.getPermission = exports.getPermission_Inner = exports.setSecurity = exports.setOwnerPasswords = exports.setUserPasswords = exports.removePasswordsAndEncryption = void 0;
const access_1 = require("../../access");
const util_1 = require("../util");
const converter_1 = require("./converter");
function removePasswordsAndEncryption(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.pdfiumSecurityRemovePasswordsAndEncryption({
                document: { documentId: id },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.removePasswordsAndEncryption = removePasswordsAndEncryption;
function setUserPasswords(id, password) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const oldPermission = yield getPermission_Inner(id);
        return new Promise((resolve, reject) => {
            client.pdfiumSecuritySetPdfSecuritySettings({
                document: { documentId: id },
                settings: {
                    userPassword: password,
                    ownerPassword: oldPermission.ownerPassword,
                    permissions: oldPermission.permissions,
                },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handlePdfDocumentResultP__Output)(value, resolve, reject);
                }
            });
        });
    });
}
exports.setUserPasswords = setUserPasswords;
function setOwnerPasswords(id, password) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const oldPermission = yield getPermission_Inner(id);
        return new Promise((resolve, reject) => {
            client.pdfiumSecuritySetPdfSecuritySettings({
                document: { documentId: id },
                settings: {
                    userPassword: oldPermission.userPassword,
                    ownerPassword: password,
                    permissions: oldPermission.permissions,
                },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handlePdfDocumentResultP__Output)(value, resolve, reject);
                }
            });
        });
    });
}
exports.setOwnerPasswords = setOwnerPasswords;
function setSecurity(id, pdfPermission) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const oldPermission = yield getPermission_Inner(id);
        return new Promise((resolve, reject) => {
            client.pdfiumSecuritySetPdfSecuritySettings({
                document: { documentId: id },
                settings: {
                    userPassword: oldPermission.userPassword,
                    ownerPassword: oldPermission.ownerPassword,
                    permissions: { enumValue: (0, converter_1.convertPermissionsInterfaceToEnum)(pdfPermission) },
                },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handlePdfDocumentResultP__Output)(value, resolve, reject);
                }
            });
        });
    });
}
exports.setSecurity = setSecurity;
function getPermission_Inner(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.pdfiumSecurityGetPdfSecuritySettings({
                document: { documentId: id },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    resolve(handlePdfiumGetPdfSecuritySettingsResultP__Output(value, reject));
                }
            });
        });
    });
}
exports.getPermission_Inner = getPermission_Inner;
function getPermission(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const p = yield getPermission_Inner(id);
        return (0, converter_1.pdfPermissionFromProto)(p.permissions);
    });
}
exports.getPermission = getPermission;
function handlePdfiumGetPdfSecuritySettingsResultP__Output(proto, reject) {
    if (proto) {
        if (proto.exception) {
            (0, util_1.handleRemoteException)(proto.exception, reject);
        }
        if (proto.securitySettings) {
            return proto.securitySettings;
        }
    }
    throw new Error("Error empty message");
}
exports.handlePdfiumGetPdfSecuritySettingsResultP__Output = handlePdfiumGetPdfSecuritySettingsResultP__Output;
//# sourceMappingURL=security.js.map