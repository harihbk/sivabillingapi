"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTextAffix = exports.addHtmlAffix = void 0;
const access_1 = require("../../access");
const render_1 = require("../../../public/render");
const util_1 = require("../util");
const converter_1 = require("../chrome/converter");
function addHtmlAffix(id, pdfPageSelection, htmlAffix, isHeader) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const chromePdfRenderOptions = (0, render_1.defaultChromePdfRenderOptions)();
        if (isHeader) {
            chromePdfRenderOptions.htmlHeader = htmlAffix;
        }
        else {
            chromePdfRenderOptions.htmlFooter = htmlAffix;
        }
        return fireHtmlRequest(client, id, pdfPageSelection, chromePdfRenderOptions);
    });
}
exports.addHtmlAffix = addHtmlAffix;
function addTextAffix(id, pdfPageSelection, textAffix, isHeader) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const chromePdfRenderOptions = (0, render_1.defaultChromePdfRenderOptions)();
        if (isHeader) {
            chromePdfRenderOptions.textHeader = textAffix;
        }
        else {
            chromePdfRenderOptions.textFooter = textAffix;
        }
        return fireTextRequest(client, id, pdfPageSelection, chromePdfRenderOptions);
    });
}
exports.addTextAffix = addTextAffix;
function fireTextRequest(client, id, pdfPageSelection, chromePdfRenderOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const pi = yield (0, util_1.AsyncPdfPageSelectionToIndexes)(id, pdfPageSelection);
        return new Promise((resolve, reject) => {
            client.pdfiumHeaderFooterAddTextHeaderFooter({
                document: { documentId: id },
                pageIndexes: pi,
                options: (0, converter_1.chromePdfRenderOptionsToProto)(chromePdfRenderOptions),
                // pdfTitle:htmlAffix
                // htmlTitle:
                // url:
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
function fireHtmlRequest(client, id, pdfPageSelection, chromePdfRenderOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const pi = yield (0, util_1.AsyncPdfPageSelectionToIndexes)(id, pdfPageSelection);
        return new Promise((resolve, reject) => {
            client.chromeHeaderFooterAddHtmlHeaderFooter({
                document: { documentId: id },
                pageIndexes: pi,
                options: (0, converter_1.chromePdfRenderOptionsToProto)(chromePdfRenderOptions),
                // pdfTitle:htmlAffix
                // htmlTitle:
                // url:
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
//# sourceMappingURL=headerFooter.js.map