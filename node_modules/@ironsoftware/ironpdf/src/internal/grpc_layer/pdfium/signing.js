"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignatureCount = exports.signPdf = void 0;
const fs_1 = __importDefault(require("fs"));
const access_1 = require("../../access");
const util_1 = require("../util");
function signPdf(id, signature) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        const existing_sigs = yield getSignatureCount(id);
        return new Promise((resolve, reject) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
            const stream = client.Pdfium_Signature_Sign((err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    if (value === null || value === void 0 ? void 0 : value.exception) {
                        (0, util_1.handleRemoteException)(value.exception, reject);
                    }
                    resolve();
                }
            });
            const info = {
                document: { documentId: id },
                password: signature.certificatePassword,
                signingLocation: signature.signingLocation,
                signingReason: signature.signingReason,
                signaturePermission: { enumValue: 0 },
                timeStampUrl: signature.timeStampUrl,
                pageIndex: (_b = (_a = signature.signatureImage) === null || _a === void 0 ? void 0 : _a.SignatureImagePageIndex) !== null && _b !== void 0 ? _b : 0,
                internalName: "Signature" + (1 + existing_sigs + 1),
                signatureImageW: (_e = (_d = (_c = signature.signatureImage) === null || _c === void 0 ? void 0 : _c.SignatureImagePosition) === null || _d === void 0 ? void 0 : _d.width) !== null && _e !== void 0 ? _e : 100,
                signatureImageH: (_h = (_g = (_f = signature.signatureImage) === null || _f === void 0 ? void 0 : _f.SignatureImagePosition) === null || _g === void 0 ? void 0 : _g.height) !== null && _h !== void 0 ? _h : 100,
                signatureImageX: (_l = (_k = (_j = signature.signatureImage) === null || _j === void 0 ? void 0 : _j.SignatureImagePosition) === null || _k === void 0 ? void 0 : _k.x) !== null && _l !== void 0 ? _l : 0,
                signatureImageY: (_p = (_o = (_m = signature.signatureImage) === null || _m === void 0 ? void 0 : _m.SignatureImagePosition) === null || _o === void 0 ? void 0 : _o.y) !== null && _p !== void 0 ? _p : 0,
            };
            const time = (_q = signature.signatureDate) === null || _q === void 0 ? void 0 : _q.getTime();
            if (time) {
                info.signatureDate = {
                    nanos: (time % 1000) * 1e6,
                    seconds: time / 1000,
                };
            }
            stream.write({ info: info });
            let certBuffer = undefined;
            if (signature.certificateBuffer) {
                certBuffer = signature.certificateBuffer;
            }
            else if (signature.certificatePath) {
                certBuffer = fs_1.default.readFileSync(signature.certificatePath);
            }
            if (certBuffer) {
                (0, util_1.chunkBuffer)(certBuffer).forEach((chunk) => {
                    stream.write({ certificateFileBytesChunk: chunk });
                });
            }
            let imageBuffer = undefined;
            if ((_r = signature.signatureImage) === null || _r === void 0 ? void 0 : _r.SignatureImageBuffer) {
                imageBuffer = (_s = signature.signatureImage) === null || _s === void 0 ? void 0 : _s.SignatureImageBuffer;
            }
            else if ((_t = signature.signatureImage) === null || _t === void 0 ? void 0 : _t.SignatureImagePath) {
                imageBuffer = fs_1.default.readFileSync((_u = signature.signatureImage) === null || _u === void 0 ? void 0 : _u.SignatureImagePath);
            }
            if (imageBuffer) {
                (0, util_1.chunkBuffer)(imageBuffer).forEach((chunk) => {
                    stream.write({ signatureImageChunk: chunk });
                });
            }
            stream.end();
        });
    });
}
exports.signPdf = signPdf;
function getSignatureCount(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_Signature_GetSignatureCount({ document: { documentId: id } }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    if (value === null || value === void 0 ? void 0 : value.exception) {
                        (0, util_1.handleRemoteException)(value.exception, reject);
                    }
                    resolve(value.result == undefined ? 0 : value.result);
                }
            });
        });
    });
}
exports.getSignatureCount = getSignatureCount;
//# sourceMappingURL=signing.js.map