"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeMetadata = exports.setMetadata = exports.setMetadataDict = exports.getMetadataDict = void 0;
const access_1 = require("../../access");
const util_1 = require("../util");
const converter_1 = require("./converter");
function getMetadataDict(id) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_Metadata_GetMetadataDict({
                document: { documentId: id },
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    if (value === null || value === void 0 ? void 0 : value.exception) {
                        (0, util_1.handleRemoteException)(value.exception, reject);
                    }
                    resolve((0, converter_1.StringDictionaryFromProto)(value.result));
                }
            });
        });
    });
}
exports.getMetadataDict = getMetadataDict;
function setMetadataDict(id, metadataDict) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_Metadata_SetMetadataDict({
                document: { documentId: id },
                metadataDict: (0, converter_1.StringDictionaryToProto)(metadataDict),
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.setMetadataDict = setMetadataDict;
function setMetadata(id, key, value) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_Metadata_SetMetadata({
                document: { documentId: id },
                key: key,
                value: value,
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.setMetadata = setMetadata;
function removeMetadata(id, key) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            client.Pdfium_Metadata_RemoveMetadata({
                document: { documentId: id },
                key: key,
            }, (err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            });
        });
    });
}
exports.removeMetadata = removeMetadata;
//# sourceMappingURL=metadata.js.map