/// <reference types="node" />
import { Buffer } from "buffer";
import { RemoteExceptionP__Output } from "../generated_proto/ironpdfengineproto/RemoteExceptionP";
import { ImageBuffer, ImageFilePath, PageInfo, PdfInput, PdfPageSelection } from "../../public/types";
import { ImageInput, PdfInputType } from "../internalType";
import { PdfDocumentResultP__Output } from "../generated_proto/ironpdfengineproto/PdfDocumentResultP";
import { EmptyResultP__Output } from "../generated_proto/ironpdfengineproto/EmptyResultP";
import { ImageType } from "../../public/image";
export declare function handleRemoteException(proto: RemoteExceptionP__Output, reject: (errorMsg: string) => void): void;
export declare const CHUNK_SIZE = 65536;
export declare function chunkString(str: string): Array<string> | null;
export declare function chunkBuffer(buffer: Buffer): Buffer[];
export declare function bufferToFile(buffer: Buffer): Promise<boolean>;
export declare function fileToBuffer(filePath: string): Promise<Buffer>;
export declare function separatePdfInput(input: PdfInput): PdfInputType;
export declare function separateImageBufferOrImagePathInput(input: ImageFilePath | ImageBuffer): ImageInput;
export declare function handlePdfDocumentResultP__Output(proto: PdfDocumentResultP__Output | undefined, resolve: (_: string) => void, reject: (errorMsg: string) => void): void;
export declare function handleEmptyResultP__Output(proto: EmptyResultP__Output | undefined, reject: (errorMsg: string) => void): void;
export declare function AsyncPdfPageSelectionToIndexes(documentId: string, pdfPageSelection?: PdfPageSelection): Promise<number[]>;
export declare function PdfPageSelectionToIndexes(documentId: string, pagesInfo: PageInfo[], pdfPageSelection?: PdfPageSelection): number[];
export declare function getFileNames(filePath: string, fileCount: number, specificFileExt?: string, defaultName?: string): string[];
export declare function getImageExtType(imageType?: ImageType): string | undefined;
//# sourceMappingURL=util.d.ts.map