"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderImagesFilesToPdf = exports.renderImagesBufferToPdf = void 0;
const path = __importStar(require("path"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("../util");
const converter_1 = require("./converter");
const access_1 = require("../../access");
function renderImagesBufferToPdf(imagesBuffer, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            const stream = client.Chrome_Image_ImageToPdf((err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handlePdfDocumentResultP__Output)(value, resolve, reject);
                }
            });
            const renderOption = (0, converter_1.chromePdfRenderOptionsToProto)(); //default
            overridePaperSize(renderOption, options === null || options === void 0 ? void 0 : options.paperSize);
            stream.write({
                info: {
                    renderOptions: renderOption,
                    imageBehavior: (0, converter_1.imageBehaviorToProto)(options === null || options === void 0 ? void 0 : options.imageBehavior),
                },
            });
            imagesBuffer.forEach((imageBuffer, index) => {
                (0, util_1.chunkBuffer)(imageBuffer).forEach((chunk) => {
                    stream.write({
                        rawImagesChunk: {
                            imageIndex: index,
                            rawImageChunk: chunk,
                        },
                    });
                });
            });
            stream.end();
        });
    });
}
exports.renderImagesBufferToPdf = renderImagesBufferToPdf;
function overridePaperSize(renderOption, pdfPaperSize) {
    if (pdfPaperSize) {
        const paperSizeSetting = (0, converter_1.pdfPaperSizeToProto)(pdfPaperSize);
        if (paperSizeSetting === null || paperSizeSetting === void 0 ? void 0 : paperSizeSetting.widthHeight) {
            renderOption.paperSize = paperSizeSetting.paperSizeP;
            renderOption.customPaperWidth = paperSizeSetting.widthHeight.width;
            renderOption.customPaperHeight =
                paperSizeSetting.widthHeight.height;
        }
        else if (paperSizeSetting) {
            renderOption.paperSize = paperSizeSetting.paperSizeP;
        }
    }
}
function renderImagesFilesToPdf(imagesBufferFilePath, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield access_1.Access.ensureConnection();
        return new Promise((resolve, reject) => {
            const stream = client.Chrome_Image_ImageFilesToPdf((err, value) => {
                if (err) {
                    reject(`${err.name}/n${err.message}`);
                }
                else if (value) {
                    (0, util_1.handlePdfDocumentResultP__Output)(value, resolve, reject);
                }
            });
            const renderOption = (0, converter_1.chromePdfRenderOptionsToProto)(); //default
            overridePaperSize(renderOption, options === null || options === void 0 ? void 0 : options.paperSize);
            stream.write({
                info: {
                    renderOptions: renderOption,
                    imageBehavior: (0, converter_1.imageBehaviorToProto)(options === null || options === void 0 ? void 0 : options.imageBehavior),
                },
            });
            imagesBufferFilePath.forEach((imagePath, index) => {
                const fileType = path.extname(imagePath);
                const buffer = fs_1.default.readFileSync(imagePath);
                (0, util_1.chunkBuffer)(buffer).forEach((chunk) => {
                    stream.write({
                        rawImagesFileChunk: {
                            fileType: fileType,
                            imageIndex: index,
                            rawImageChunk: chunk,
                        },
                    });
                });
            });
            stream.end();
        });
    });
}
exports.renderImagesFilesToPdf = renderImagesFilesToPdf;
//# sourceMappingURL=image.js.map