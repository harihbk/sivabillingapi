"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.barcodeTypeToProto = exports.cssMediaTypeToProto = exports.verticalAlignmentToProto = exports.horizontalAlignmentToProto = exports.measurementUnitToProto = exports.lengthToProto = exports.BarcodeStampOptionsToProto = exports.ImageStampOptionsToProto = exports.TextStampOptionsToProto = exports.HtmlStampOptionsToProto = exports.customPaperSizeToMm = exports.imageBehaviorToProto = exports.pdfPaperSizeToProto = exports.paperSizeToProto = exports.useMarginsToProto = exports.fontToProto = exports.textAffixToProto = exports.htmlAffixToProto = exports.pdfPaperSizeIsCustom = exports.chromePdfRenderOptionsToProto = exports.convertWaitFor = exports.httpLoginCredentialsToProto = exports.CssMediaTypeToProto = exports.PdfPaperOrientationToProto = exports.fitToPaperModeToProto = void 0;
const types_1 = require("../../../public/types");
const paper_1 = require("../../../public/paper");
const render_1 = require("../../../public/render");
const converter_1 = require("../pdfium/converter");
const util_1 = require("../util");
function fitToPaperModeToProto(fitToPaperMode) {
    if (!fitToPaperMode)
        return undefined;
    return { enumValue: fitToPaperMode };
}
exports.fitToPaperModeToProto = fitToPaperModeToProto;
function PdfPaperOrientationToProto(pdfPaperOrientation) {
    if (!pdfPaperOrientation)
        return undefined;
    return { enumValue: pdfPaperOrientation };
}
exports.PdfPaperOrientationToProto = PdfPaperOrientationToProto;
function CssMediaTypeToProto(cssMediaType) {
    if (!cssMediaType)
        return undefined;
    return { enumValue: cssMediaType };
}
exports.CssMediaTypeToProto = CssMediaTypeToProto;
function httpLoginCredentialsToProto(httpLoginCredentials) {
    if (!httpLoginCredentials)
        return undefined;
    throw new Error("not implement");
}
exports.httpLoginCredentialsToProto = httpLoginCredentialsToProto;
function convertWaitFor(waitFor) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const defaultMaxWaitTime = 10000;
    const defaultNetworkIdleDuration = 500;
    const defaultNumAllowedInFlight = 0;
    const defaultRenderDelayDuration = 20;
    const defaultHtmlElementQueryStr = "";
    if (!waitFor) {
        return {
            type: 0,
            timeout: defaultMaxWaitTime,
            networkIdleDuration: defaultNetworkIdleDuration,
            numAllowedInFlight: defaultNumAllowedInFlight,
            renderDelayDuration: defaultRenderDelayDuration,
            htmlElementQueryStr: defaultHtmlElementQueryStr
        };
    }
    switch (waitFor.type) {
        case types_1.WaitForType.PageLoad:
            return {
                type: 0,
                timeout: defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.JavaScript:
            return {
                type: 1,
                timeout: (_a = waitFor.maxWaitTime) !== null && _a !== void 0 ? _a : defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.RenderDelay:
            return {
                type: 2,
                timeout: defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: (_b = waitFor.delay) !== null && _b !== void 0 ? _b : defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.NetworkIdle0:
            return {
                type: 3,
                timeout: (_c = waitFor.maxWaitTime) !== null && _c !== void 0 ? _c : defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.NetworkIdle2:
            return {
                type: 4,
                timeout: (_d = waitFor.maxWaitTime) !== null && _d !== void 0 ? _d : defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.NetworkIdleN:
            return {
                type: 5,
                timeout: (_e = waitFor.maxWaitTime) !== null && _e !== void 0 ? _e : defaultMaxWaitTime,
                networkIdleDuration: (_f = waitFor.networkIdleDuration) !== null && _f !== void 0 ? _f : defaultNetworkIdleDuration,
                numAllowedInFlight: (_g = waitFor.maxNumAllowedInflight) !== null && _g !== void 0 ? _g : defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: defaultHtmlElementQueryStr
            };
        case types_1.WaitForType.HtmlElement:
            return {
                type: 6,
                timeout: (_h = waitFor.maxWaitTime) !== null && _h !== void 0 ? _h : defaultMaxWaitTime,
                networkIdleDuration: defaultNetworkIdleDuration,
                numAllowedInFlight: defaultNumAllowedInFlight,
                renderDelayDuration: defaultRenderDelayDuration,
                htmlElementQueryStr: waitFor.htmlQueryStr
            };
    }
}
exports.convertWaitFor = convertWaitFor;
function chromePdfRenderOptionsToProto(renderOption) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (!renderOption)
        renderOption = (0, render_1.defaultChromePdfRenderOptions)();
    const waitForDetail = convertWaitFor(renderOption.waitFor);
    const proto = {
        createPdfFormsFromHtml: renderOption.createPdfFormsFromHtml,
        customCssUrl: renderOption.customCssUrl,
        enableJavaScript: renderOption.enableJavaScript,
        fitToPaperMode: fitToPaperModeToProto(renderOption.fitToPaperMode),
        grayScale: renderOption.grayScale,
        marginTop: ((_a = renderOption.margin) === null || _a === void 0 ? void 0 : _a.top) || ((_b = renderOption.margin) === null || _b === void 0 ? void 0 : _b.default),
        marginBottom: ((_c = renderOption.margin) === null || _c === void 0 ? void 0 : _c.bottom) || ((_d = renderOption.margin) === null || _d === void 0 ? void 0 : _d.default),
        marginLeft: ((_e = renderOption.margin) === null || _e === void 0 ? void 0 : _e.left) || ((_f = renderOption.margin) === null || _f === void 0 ? void 0 : _f.default),
        marginRight: ((_g = renderOption.margin) === null || _g === void 0 ? void 0 : _g.right) || ((_h = renderOption.margin) === null || _h === void 0 ? void 0 : _h.default),
        paperOrientation: PdfPaperOrientationToProto(renderOption.paperOrientation),
        printHtmlBackgrounds: renderOption.printHtmlBackgrounds,
        timeout: (_j = renderOption.timeout) !== null && _j !== void 0 ? _j : 60,
        waitFor: {
            Type: waitForDetail.type,
            Timeout: waitForDetail.timeout,
            NetworkIdleDuration: waitForDetail.networkIdleDuration,
            NumAllowedInFlight: waitForDetail.numAllowedInFlight,
            RenderDelayDuration: waitForDetail.renderDelayDuration,
            HtmlElementQueryStr: waitForDetail.htmlElementQueryStr,
        },
        // WaitForNetworkIdleDuration: waitForDetail.networkIdleDuration,
        // WaitForType: waitForDetail.type,
        // WaitForNumAllowedInflight: waitForDetail.numAllowedInFlight,
        // WaitForTimeout: waitForDetail.timeout,
        title: renderOption.title,
        viewPortHeight: 1280,
        viewPortWidth: 1024,
        zoom: 100,
        inputEncoding: renderOption.inputEncoding,
        cssMediaType: CssMediaTypeToProto(renderOption.cssMediaType),
        javascript: renderOption.javascript,
        firstPageNumber: renderOption.firstPageNumber,
        useMarginsOnHeaderFooter: useMarginsToProto(renderOption.useMarginsOnHeaderAndFooter),
    };
    if (renderOption.htmlHeader) {
        proto.htmlHeader = htmlAffixToProto(renderOption.htmlHeader);
    }
    if (renderOption.htmlFooter) {
        proto.htmlFooter = htmlAffixToProto(renderOption.htmlFooter);
    }
    if (renderOption.textHeader) {
        proto.textHeader = textAffixToProto(renderOption.textHeader);
    }
    if (renderOption.textFooter) {
        proto.textFooter = textAffixToProto(renderOption.textFooter);
    }
    if (renderOption.paperSize) {
        if (pdfPaperSizeIsCustom(renderOption.paperSize)) {
            const wh = customPaperSizeToMm(renderOption.paperSize);
            proto.customPaperHeight = wh.height;
            proto.customPaperWidth = wh.width;
            proto.paperSize = { enumValue: 106 }; //custom
        }
        else {
            proto.paperSize = paperSizeToProto(renderOption.paperSize);
        }
    }
    return proto;
}
exports.chromePdfRenderOptionsToProto = chromePdfRenderOptionsToProto;
function pdfPaperSizeIsCustom(pdfPaperSize) {
    if (pdfPaperSize instanceof Object &&
        "width" in pdfPaperSize &&
        "height" in pdfPaperSize &&
        "unit" in pdfPaperSize) {
        return true;
    }
    else {
        return false;
    }
}
exports.pdfPaperSizeIsCustom = pdfPaperSizeIsCustom;
function htmlAffixToProto(htmlAffix) {
    var _a, _b, _c, _d, _e;
    if (!htmlAffix)
        return undefined;
    return {
        htmlFragment: (_a = htmlAffix.htmlFragment) !== null && _a !== void 0 ? _a : "",
        // baseUrl: htmlAffix.baseUrl, //not supported
        dividerLineColor: (_b = htmlAffix.dividerLineColor) !== null && _b !== void 0 ? _b : "#B1B1B1",
        drawDividerLine: (_c = htmlAffix.dividerLine) !== null && _c !== void 0 ? _c : false,
        loadStylesAndCSSFromMainHtmlDocument: (_d = htmlAffix.loadStylesAndCSSFromMainHtmlDocument) !== null && _d !== void 0 ? _d : false,
        maxHeight: (_e = htmlAffix.maxHeight) !== null && _e !== void 0 ? _e : 176.388,
    };
}
exports.htmlAffixToProto = htmlAffixToProto;
function textAffixToProto(textAffix) {
    var _a, _b, _c;
    if (!textAffix)
        return undefined;
    return {
        leftText: textAffix.leftText,
        rightText: textAffix.rightText,
        centerText: textAffix.centerText,
        font: fontToProto(textAffix.font),
        fontSize: (_a = textAffix.fontSize) !== null && _a !== void 0 ? _a : 12,
        dividerLineColor: (_b = textAffix.dividerLineColor) !== null && _b !== void 0 ? _b : "#B1B1B1",
        drawDividerLine: (_c = textAffix.dividerLine) !== null && _c !== void 0 ? _c : false,
    };
}
exports.textAffixToProto = textAffixToProto;
function fontToProto(affixFonts) {
    if (!affixFonts)
        return { name: types_1.AffixFonts[types_1.AffixFonts.Arial].replace("_", "-") };
    return { name: types_1.AffixFonts[affixFonts].replace("_", "-") };
}
exports.fontToProto = fontToProto;
function useMarginsToProto(useMargins) {
    return { enumValue: useMargins };
}
exports.useMarginsToProto = useMarginsToProto;
function paperSizeToProto(paperSize) {
    if (!paperSize)
        return undefined;
    return { enumValue: paperSize };
}
exports.paperSizeToProto = paperSizeToProto;
function toMillimeters(paperSize) {
    switch (paperSize) {
        case paper_1.PaperSize.Letter:
            return { width: 216, height: 279 };
        case paper_1.PaperSize.Legal:
            return { width: 216, height: 356 };
        case paper_1.PaperSize.A4:
            return { width: 210, height: 297 };
        case paper_1.PaperSize.CSheet:
            return { width: 432, height: 559 };
        case paper_1.PaperSize.DSheet:
            return { width: 559, height: 864 };
        case paper_1.PaperSize.ESheet:
            return { width: 864, height: 1118 };
        case paper_1.PaperSize.LetterSmall:
            return { width: 216, height: 279 };
        case paper_1.PaperSize.Tabloid:
            return { width: 279, height: 432 };
        case paper_1.PaperSize.Ledger:
            return { width: 432, height: 279 };
        case paper_1.PaperSize.Statement:
            return { width: 140, height: 216 };
        case paper_1.PaperSize.Executive:
            return { width: 184, height: 267 };
        case paper_1.PaperSize.A3:
            return { width: 297, height: 420 };
        case paper_1.PaperSize.A4Small:
            return { width: 210, height: 297 };
        case paper_1.PaperSize.A5:
            return { width: 148, height: 210 };
        case paper_1.PaperSize.B4:
            return { width: 250, height: 353 };
        case paper_1.PaperSize.B5:
            return { width: 176, height: 250 };
        case paper_1.PaperSize.Folio:
            return { width: 216, height: 330 };
        case paper_1.PaperSize.Quarto:
            return { width: 215, height: 275 };
        case paper_1.PaperSize.Standard10x14:
            return { width: 254, height: 356 };
        case paper_1.PaperSize.Standard11x17:
            return { width: 279, height: 432 };
        case paper_1.PaperSize.Note:
            return { width: 216, height: 279 };
        case paper_1.PaperSize.Number9Envelope:
            return { width: 98, height: 225 };
        case paper_1.PaperSize.Number10Envelope:
            return { width: 105, height: 241 };
        case paper_1.PaperSize.Number11Envelope:
            return { width: 114, height: 264 };
        case paper_1.PaperSize.Number12Envelope:
            return { width: 121, height: 279 };
        case paper_1.PaperSize.Number14Envelope:
            return { width: 127, height: 292 };
        case paper_1.PaperSize.DLEnvelope:
            return { width: 110, height: 220 };
        case paper_1.PaperSize.C5Envelope:
            return { width: 162, height: 229 };
        case paper_1.PaperSize.C3Envelope:
            return { width: 324, height: 458 };
        case paper_1.PaperSize.C4Envelope:
            return { width: 229, height: 324 };
        case paper_1.PaperSize.C65Envelope:
            return { width: 114, height: 229 };
        case paper_1.PaperSize.B4Envelope:
            return { width: 250, height: 353 };
        case paper_1.PaperSize.B5Envelope:
            return { width: 176, height: 250 };
        case paper_1.PaperSize.B6Envelope:
            return { width: 176, height: 125 };
        case paper_1.PaperSize.ItalyEnvelope:
            return { width: 110, height: 230 };
        case paper_1.PaperSize.MonarchEnvelope:
            return { width: 98, height: 191 };
        case paper_1.PaperSize.PersonalEnvelope:
            return { width: 92, height: 165 };
        case paper_1.PaperSize.USStandardFanfold:
            return { width: 378, height: 279 };
        case paper_1.PaperSize.GermanStandardFanfold:
            return { width: 216, height: 305 };
        case paper_1.PaperSize.GermanLegalFanfold:
            return { width: 216, height: 330 };
        case paper_1.PaperSize.IsoB4:
            return { width: 250, height: 353 };
        case paper_1.PaperSize.JapanesePostcard:
            return { width: 100, height: 148 };
        case paper_1.PaperSize.Standard9x11:
            return { width: 229, height: 279 };
        case paper_1.PaperSize.Standard10x11:
            return { width: 254, height: 279 };
        case paper_1.PaperSize.Standard15x11:
            return { width: 381, height: 279 };
        case paper_1.PaperSize.InviteEnvelope:
            return { width: 220, height: 220 };
        case paper_1.PaperSize.LetterExtra:
            return { width: 236, height: 305 };
        case paper_1.PaperSize.LegalExtra:
            return { width: 236, height: 381 };
        case paper_1.PaperSize.TabloidExtra:
            return { width: 297, height: 457 };
        case paper_1.PaperSize.A4Extra:
            return { width: 236, height: 322 };
        case paper_1.PaperSize.LetterTransverse:
            return { width: 210, height: 279 };
        case paper_1.PaperSize.A4Transverse:
            return { width: 210, height: 297 };
        case paper_1.PaperSize.LetterExtraTransverse:
            return { width: 236, height: 305 };
        case paper_1.PaperSize.APlus:
            return { width: 227, height: 356 };
        case paper_1.PaperSize.BPlus:
            return { width: 305, height: 487 };
        case paper_1.PaperSize.LetterPlus:
            return { width: 216, height: 322 };
        case paper_1.PaperSize.A4Plus:
            return { width: 210, height: 330 };
        case paper_1.PaperSize.A5Transverse:
            return { width: 148, height: 210 };
        case paper_1.PaperSize.B5Transverse:
            return { width: 182, height: 257 };
        case paper_1.PaperSize.A3Extra:
            return { width: 322, height: 445 };
        case paper_1.PaperSize.A5Extra:
            return { width: 174, height: 235 };
        case paper_1.PaperSize.B5Extra:
            return { width: 201, height: 276 };
        case paper_1.PaperSize.A2:
            return { width: 420, height: 594 };
        case paper_1.PaperSize.A3Transverse:
            return { width: 297, height: 420 };
        case paper_1.PaperSize.A3ExtraTransverse:
            return { width: 322, height: 445 };
        case paper_1.PaperSize.JapaneseDoublePostcard:
            return { width: 200, height: 148 };
        case paper_1.PaperSize.A6:
            return { width: 105, height: 148 };
        case paper_1.PaperSize.LetterRotated:
            return { width: 279, height: 216 };
        case paper_1.PaperSize.A3Rotated:
            return { width: 420, height: 297 };
        case paper_1.PaperSize.A4Rotated:
            return { width: 297, height: 210 };
        case paper_1.PaperSize.A5Rotated:
            return { width: 210, height: 148 };
        case paper_1.PaperSize.B4JisRotated:
            return { width: 364, height: 257 };
        case paper_1.PaperSize.B5JisRotated:
            return { width: 257, height: 182 };
        case paper_1.PaperSize.JapanesePostcardRotated:
            return { width: 148, height: 100 };
        case paper_1.PaperSize.JapaneseDoublePostcardRotated:
            return { width: 148, height: 200 };
        case paper_1.PaperSize.A6Rotated:
            return { width: 148, height: 105 };
        case paper_1.PaperSize.B6Jis:
            return { width: 128, height: 182 };
        case paper_1.PaperSize.B6JisRotated:
            return { width: 182, height: 128 };
        case paper_1.PaperSize.Standard12x11:
            return { width: 305, height: 279 };
        case paper_1.PaperSize.Prc16K:
            return { width: 146, height: 215 };
        case paper_1.PaperSize.Prc32K:
            return { width: 97, height: 151 };
        case paper_1.PaperSize.Prc32KBig:
            return { width: 97, height: 151 };
        case paper_1.PaperSize.PrcEnvelopeNumber1:
            return { width: 102, height: 165 };
        case paper_1.PaperSize.PrcEnvelopeNumber2:
            return { width: 102, height: 176 };
        case paper_1.PaperSize.PrcEnvelopeNumber3:
            return { width: 125, height: 176 };
        case paper_1.PaperSize.PrcEnvelopeNumber4:
            return { width: 110, height: 208 };
        case paper_1.PaperSize.PrcEnvelopeNumber5:
            return { width: 110, height: 220 };
        case paper_1.PaperSize.PrcEnvelopeNumber6:
            return { width: 120, height: 230 };
        case paper_1.PaperSize.PrcEnvelopeNumber7:
            return { width: 160, height: 230 };
        case paper_1.PaperSize.PrcEnvelopeNumber8:
            return { width: 120, height: 309 };
        case paper_1.PaperSize.PrcEnvelopeNumber9:
            return { width: 229, height: 324 };
        case paper_1.PaperSize.PrcEnvelopeNumber10:
            return { width: 324, height: 458 };
        case paper_1.PaperSize.Prc16KRotated:
            return { width: 215, height: 146 };
        case paper_1.PaperSize.Prc32KRotated:
            return { width: 151, height: 97 };
        case paper_1.PaperSize.Prc32KBigRotated:
            return { width: 151, height: 97 };
        case paper_1.PaperSize.PrcEnvelopeNumber1Rotated:
            return { width: 165, height: 102 };
        case paper_1.PaperSize.PrcEnvelopeNumber2Rotated:
            return { width: 176, height: 102 };
        case paper_1.PaperSize.PrcEnvelopeNumber3Rotated:
            return { width: 176, height: 125 };
        case paper_1.PaperSize.PrcEnvelopeNumber4Rotated:
            return { width: 208, height: 110 };
        case paper_1.PaperSize.PrcEnvelopeNumber5Rotated:
            return { width: 220, height: 110 };
        case paper_1.PaperSize.PrcEnvelopeNumber6Rotated:
            return { width: 230, height: 120 };
        case paper_1.PaperSize.PrcEnvelopeNumber7Rotated:
            return { width: 230, height: 160 };
        case paper_1.PaperSize.PrcEnvelopeNumber8Rotated:
            return { width: 309, height: 120 };
        case paper_1.PaperSize.PrcEnvelopeNumber9Rotated:
            return { width: 324, height: 229 };
        case paper_1.PaperSize.PrcEnvelopeNumber10Rotated:
            return { width: 458, height: 324 };
        default:
            throw new Error("Unsupported paper size");
    }
}
function pdfPaperSizeToProto(pdfPaperSize) {
    if (!pdfPaperSize)
        return undefined;
    if (typeof pdfPaperSize === "object") {
        if ("width" in pdfPaperSize) {
            return {
                paperSizeP: { enumValue: 106 },
                widthHeight: {
                    width: pdfPaperSize.width,
                    height: pdfPaperSize.height,
                },
            };
        }
    }
    else {
        const wh = toMillimeters(pdfPaperSize);
        return {
            paperSizeP: { enumValue: pdfPaperSize },
            widthHeight: { width: wh.width, height: wh.height },
        };
    }
}
exports.pdfPaperSizeToProto = pdfPaperSizeToProto;
function imageBehaviorToProto(imageBehavior) {
    if (!imageBehavior)
        return undefined;
    return { enumValue: imageBehavior };
}
exports.imageBehaviorToProto = imageBehaviorToProto;
function customPaperSizeToMm(customPaperSize) {
    switch (customPaperSize.unit) {
        case types_1.PaperSizeUnit.Centimeter:
            return {
                width: customPaperSize.width * 10,
                height: customPaperSize.height * 10,
            };
        case types_1.PaperSizeUnit.Inch:
            return {
                width: customPaperSize.width * 25.4,
                height: customPaperSize.height * 25.4,
            };
        case types_1.PaperSizeUnit.Millimeter:
            return {
                width: customPaperSize.width,
                height: customPaperSize.height,
            };
        case types_1.PaperSizeUnit.Points:
            return {
                width: customPaperSize.width * 0.352777778,
                height: customPaperSize.height * 0.352777778,
            };
    }
}
exports.customPaperSizeToMm = customPaperSizeToMm;
function BaseStampOptionsToProto(id, pagesInfo, defaultRenderDelay, password, options, pageSelection) {
    var _a, _b, _c, _d;
    const pi = (_a = (0, util_1.PdfPageSelectionToIndexes)(id, pagesInfo, pageSelection)) !== null && _a !== void 0 ? _a : Array.from({
        length: pagesInfo.length,
    }).map((value, index) => index);
    const pageP = pi.map((pageIndex) => {
        // if (pagesInfo) {
        return {
            width: pagesInfo[pageIndex].millimeterWidth,
            height: pagesInfo[pageIndex].millimeterHeight,
            pageIndex: pageIndex,
            pageRotation: (0, converter_1.PageRotationToProto)(pagesInfo[pageIndex].pageRotation),
            printWidth: pagesInfo[pageIndex].printerPointWidth,
            printHeight: pagesInfo[pageIndex].printerPointHeight,
        };
        // }
        // return { pageIndex: pageIndex };
    });
    return {
        document: { documentId: id },
        hyperlink: options === null || options === void 0 ? void 0 : options.hyperlink,
        horizontalAlignment: horizontalAlignmentToProto(options === null || options === void 0 ? void 0 : options.horizontalAlignment),
        verticalAlignment: verticalAlignmentToProto(options === null || options === void 0 ? void 0 : options.verticalAlignment),
        horizontalOffset: lengthToProto(options === null || options === void 0 ? void 0 : options.horizontalOffset),
        verticalOffset: lengthToProto(options === null || options === void 0 ? void 0 : options.verticalOffset),
        isStampBehindContent: (_b = options === null || options === void 0 ? void 0 : options.behindExistingContent) !== null && _b !== void 0 ? _b : false,
        opacity: options === null || options === void 0 ? void 0 : options.opacity,
        rotation: options === null || options === void 0 ? void 0 : options.rotation,
        scale: options === null || options === void 0 ? void 0 : options.scale,
        targetPages: pageP !== null && pageP !== void 0 ? pageP : [],
        ownerPassword: password === null || password === void 0 ? void 0 : password.ownerPassword,
        userPassword: password === null || password === void 0 ? void 0 : password.userPassword,
        renderDelay: (_c = options === null || options === void 0 ? void 0 : options.renderDelay) !== null && _c !== void 0 ? _c : defaultRenderDelay,
        timeout: (_d = options === null || options === void 0 ? void 0 : options.timeout) !== null && _d !== void 0 ? _d : 60,
        maxHeight: lengthToProto(options === null || options === void 0 ? void 0 : options.maxHeight),
        minHeight: lengthToProto(options === null || options === void 0 ? void 0 : options.minHeight),
        maxWidth: lengthToProto(options === null || options === void 0 ? void 0 : options.maxWidth),
        minWidth: lengthToProto(options === null || options === void 0 ? void 0 : options.minWidth),
    };
}
function HtmlStampOptionsToProto(id, pagesInfo, password, options, pageSelection) {
    const base = BaseStampOptionsToProto(id, pagesInfo, 100, password, options, pageSelection);
    base.htmlStamper = {
        //baseUrl: options?.baseUrl,  //not supported
        cssMediaType: cssMediaTypeToProto(options === null || options === void 0 ? void 0 : options.cssMediaType),
    };
    return base;
}
exports.HtmlStampOptionsToProto = HtmlStampOptionsToProto;
function TextStampOptionsToProto(id, pagesInfo, password, options, pageSelection) {
    const base = BaseStampOptionsToProto(id, pagesInfo, 0, password, options, pageSelection);
    base.textStamper = {
        textColor: options === null || options === void 0 ? void 0 : options.textColor,
        fontSize: options === null || options === void 0 ? void 0 : options.fontSize,
        backgroundColor: options === null || options === void 0 ? void 0 : options.backgroundColor,
        fontFamily: options === null || options === void 0 ? void 0 : options.fontFamily,
        isBold: options === null || options === void 0 ? void 0 : options.isBold,
        isItalic: options === null || options === void 0 ? void 0 : options.isItalic,
        isStrikethrough: options === null || options === void 0 ? void 0 : options.isStrikethrough,
        isUnderline: options === null || options === void 0 ? void 0 : options.isUnderline,
        useGoogleFont: options === null || options === void 0 ? void 0 : options.useGoogleFont,
    };
    return base;
}
exports.TextStampOptionsToProto = TextStampOptionsToProto;
function ImageStampOptionsToProto(id, pagesInfo, password, options, pageSelection) {
    const base = BaseStampOptionsToProto(id, pagesInfo, 0, password, options, pageSelection);
    base.imageStamper = {};
    return base;
}
exports.ImageStampOptionsToProto = ImageStampOptionsToProto;
function BarcodeStampOptionsToProto(id, pagesInfo, password, options, pageSelection) {
    var _a, _b, _c;
    const base = BaseStampOptionsToProto(id, pagesInfo, 0, password, options, pageSelection);
    base.barcodeStamper = {
        widthPx: (_a = options === null || options === void 0 ? void 0 : options.widthPx) !== null && _a !== void 0 ? _a : 250,
        heightPx: (_b = options === null || options === void 0 ? void 0 : options.heightPx) !== null && _b !== void 0 ? _b : 250,
        barcodeType: barcodeTypeToProto((_c = options === null || options === void 0 ? void 0 : options.barcodeType) !== null && _c !== void 0 ? _c : types_1.BarcodeType.qrCode),
    };
    return base;
}
exports.BarcodeStampOptionsToProto = BarcodeStampOptionsToProto;
function lengthToProto(length) {
    if (!length)
        return undefined;
    return {
        value: length.value,
        unit: measurementUnitToProto(length.unit),
    };
}
exports.lengthToProto = lengthToProto;
function measurementUnitToProto(measurementUnit) {
    if (!measurementUnit)
        return undefined;
    return {
        enumValue: measurementUnit,
    };
}
exports.measurementUnitToProto = measurementUnitToProto;
function horizontalAlignmentToProto(horizontalAlignment) {
    if (!horizontalAlignment)
        return undefined;
    return {
        enumValue: horizontalAlignment,
    };
}
exports.horizontalAlignmentToProto = horizontalAlignmentToProto;
function verticalAlignmentToProto(verticalAlignment) {
    if (!verticalAlignment)
        return undefined;
    return {
        enumValue: verticalAlignment,
    };
}
exports.verticalAlignmentToProto = verticalAlignmentToProto;
function cssMediaTypeToProto(cssMediaType) {
    if (!cssMediaType)
        return undefined;
    return {
        enumValue: cssMediaType,
    };
}
exports.cssMediaTypeToProto = cssMediaTypeToProto;
function barcodeTypeToProto(barcodeType) {
    if (!barcodeType)
        return undefined;
    return {
        enumValue: barcodeType,
    };
}
exports.barcodeTypeToProto = barcodeTypeToProto;
//# sourceMappingURL=converter.js.map