"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setLicenseKey = exports.setIsDebug = void 0;
const util_1 = require("./util");
function setIsDebug(client, isDebug) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(function (resolve, reject) {
            client.systemLoggerSetIsDebug({ isDebug: isDebug }, (err, value) => __awaiter(this, void 0, void 0, function* () {
                if (err) {
                    reject(err.name + err.message);
                }
                else if (value) {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            }));
        });
    });
}
exports.setIsDebug = setIsDebug;
function setLicenseKey(client, licenseKey) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(function (resolve, reject) {
            client.systemLicenseSetLicenseKey({ licenseKey: licenseKey }, (err, value) => __awaiter(this, void 0, void 0, function* () {
                if (err) {
                    reject(err.name + err.message);
                }
                else {
                    (0, util_1.handleEmptyResultP__Output)(value, reject);
                    resolve();
                }
            }));
        });
    });
}
exports.setLicenseKey = setLicenseKey;
//# sourceMappingURL=system.js.map