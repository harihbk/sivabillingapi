"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handshakeWithRetry = void 0;
const ironpdfglobalconfig_1 = require("../../public/ironpdfglobalconfig");
const handshakeRequest = {
    progLang: "nodejs",
    expectedVersion: ironpdfglobalconfig_1.IronPdfGlobalConfig.ironPdfEngineVersion,
};
function handshake(client) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(function (resolve, reject) {
            client.handshake(handshakeRequest, (err, value) => __awaiter(this, void 0, void 0, function* () {
                if (err) {
                    reject(err.name + err.message);
                }
                else if (value) {
                    resolve(value);
                }
            }));
        });
    });
}
function retryDelay(reason) {
    return new Promise(function (resolve, reject) {
        setTimeout(reject.bind(null, reason), 4000);
    });
}
function handshakeWithRetry(client, retryCount) {
    return __awaiter(this, void 0, void 0, function* () {
        let p = Promise.reject();
        for (let i = 0; i < retryCount; i++) {
            p = p.catch((_) => handshake(client)).catch((r) => {
                if (ironpdfglobalconfig_1.IronPdfGlobalConfig.getConfig().debugMode)
                    console.log(`Waiting for IronPdfEngine is ready. (Retry ${i + 1}/${retryCount})`);
                return retryDelay(r);
            });
        }
        return p;
    });
}
exports.handshakeWithRetry = handshakeWithRetry;
//# sourceMappingURL=handshake.js.map