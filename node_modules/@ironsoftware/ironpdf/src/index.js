"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forceShutdown = exports.config = exports.cleanUp = void 0;
const access_1 = require("./internal/access");
const io_1 = require("./internal/grpc_layer/pdfium/io");
const ironpdfglobalconfig_1 = require("./public/ironpdfglobalconfig");
/**
 * Force clean up app resource of IronPdf, result in all previously created PdfDocument objects becoming unusable.
 *
 * See {@link PdfDocument.close} for individual resource clean up for each PdfDocument objects
 */
function cleanUp() {
    return __awaiter(this, void 0, void 0, function* () {
        // deletePdf(pdfDocumentId) for all ids in static[]
        for (const usedId of access_1.Access.usedDocumentIds) {
            yield (0, io_1.disposePdf)(usedId);
        }
    });
}
exports.cleanUp = cleanUp;
/**
 * A global configuration for IronPdf including {@link IronPdfConfig.licenseKey}
 * @param ironPdfConfig {@link IronPdfConfig}
 */
function config(ironPdfConfig) {
    ironpdfglobalconfig_1.IronPdfGlobalConfig.setConfig(ironPdfConfig);
}
exports.config = config;
/**
 * Force Shutdown IronPdf Engine process
 */
function forceShutdown() {
    access_1.Access.forceShutdown();
}
exports.forceShutdown = forceShutdown;
/* not yet implemented - leave to next release
etc in papersize
Attachments
Bookmarks
Read and fill Forms
SecuritySettings
Revisions
GetVerifiedSignatures
Flatten
drawImageToPdf
*/
__exportStar(require("./public/affix"), exports);
__exportStar(require("./public/image"), exports);
__exportStar(require("./public/ironpdfglobalconfig"), exports);
__exportStar(require("./public/page"), exports);
__exportStar(require("./public/paper"), exports);
__exportStar(require("./public/pdfDocument"), exports);
__exportStar(require("./public/pdfGenerator"), exports);
__exportStar(require("./public/render"), exports);
__exportStar(require("./public/security"), exports);
__exportStar(require("./public/signature"), exports);
__exportStar(require("./public/stamp"), exports);
__exportStar(require("./public/types"), exports);
//# sourceMappingURL=index.js.map